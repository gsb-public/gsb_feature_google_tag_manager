<?php
/**
* @file
* Code for the GSB Feature Google Tag Manager
*/

/**
 * Implements hook_ctools_plugin_api().
 */
function gsb_feature_google_tag_manager_ctools_plugin_api($owner, $api) {
  if ($owner == 'metatag' && $api == 'metatag') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_metatag_info().
 */
function gsb_feature_google_tag_manager_metatag_info()
{
  $info['groups']['gsb-metatags'] = array(
    'label' => t('GSB Metatags'),
    'description' => t('A set of meta tags specifically for the GSB Public Site</a>.', array('!url' => 'http://gsb.stanford.edu/')),
    'form' => array(
      '#weight' => 70,
    ),
  );

  // GSB meta tags stack after the Twitter tags.
  $weight = 70;

  // Defaults used for all cards.
  $defaults = array(
    'class' => 'DrupalTextMetaTag',
    'group' => 'gsb-metatags',
  );

  $info['tags']['gsb:dimension1'] = array(
    'label' => t('GTM Dimension 1'),
    'description' => t('Notes: Dimension 1 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension2'] = array(
    'label' => t('GTM Dimension 2'),
    'description' => t('Notes: Dimension 2 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension3'] = array(
    'label' => t('GTM Dimension 3'),
    'description' => t('Notes: Dimension 3 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension4'] = array(
    'label' => t('GTM Dimension 4'),
    'description' => t('Notes: Dimension 4 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension5'] = array(
    'label' => t('GTM Dimension 5'),
    'description' => t('Notes: Dimension 5 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension6'] = array(
    'label' => t('GTM Dimension 6'),
    'description' => t('Notes: Dimension 6 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension7'] = array(
    'label' => t('GTM Dimension 7'),
    'description' => t('Notes: Dimension 7 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension8'] = array(
    'label' => t('GTM Dimension 8'),
    'description' => t('Notes: Dimension 8 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension9'] = array(
    'label' => t('GTM Dimension 9'),
    'description' => t('Notes: Dimension 9 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension10'] = array(
    'label' => t('GTM Dimension 10'),
    'description' => t('Notes: Dimension 10 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension11'] = array(
    'label' => t('GTM Dimension 11'),
    'description' => t('Notes: Dimension 11 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension12'] = array(
    'label' => t('GTM Dimension 12'),
    'description' => t('Notes: Dimension 12 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension13'] = array(
    'label' => t('GTM Dimension 13'),
    'description' => t('Notes: Dimension 13 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension14'] = array(
    'label' => t('GTM Dimension 14'),
    'description' => t('Notes: Dimension 14 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension15'] = array(
    'label' => t('GTM Dimension 15'),
    'description' => t('Notes: Dimension 15 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension16'] = array(
    'label' => t('GTM Dimension 16'),
    'description' => t('Notes: Dimension 16 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension17'] = array(
    'label' => t('GTM Dimension 17'),
    'description' => t('Notes: Dimension 17 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension18'] = array(
    'label' => t('GTM Dimension 18'),
    'description' => t('Notes: Dimension 18 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension19'] = array(
    'label' => t('GTM Dimension 19'),
    'description' => t('Notes: Dimension 19 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  $info['tags']['gsb:dimension20'] = array(
    'label' => t('GTM Dimension 20'),
    'description' => t('Notes: Dimension 20 is used by Google Tag Manager'),
    'weight' => ++$weight,
  ) + $defaults;

  return $info;
}

/**
 * Implements hook_node_view_alter().
 * We are doing this to display resources as part of the metatags. We needed
 * to make this so complicated, because when clearing the cache the filters get
 * run on all the nodes that are loaded so we can't determine which one is the
 * correct one for the node that is being viewed.
 */
function gsb_feature_google_tag_manager_node_view_alter($build) {
  $current_node = menu_get_object();
  // If we are not on the current node then return.
  if (empty($build['#node']->nid) || empty($current_node) || $build['#node']->nid !== $current_node->nid) {
    return;
  }

  // Loop through all fields.
  foreach ($build as $field => $info) {
    if (is_array($info) && !empty($info['#items'])) {
      // Loop through all items in the field.
      foreach ($info['#items'] as $key => $item) {
        // Make sure it has a format attached to it.
        if (!empty($item['format'])) {
          // Make sure the format handles resources.
          $filters = filter_list_format($item['format']);
          if (!empty($filters['resources_filter']->status)) {

            // Find all the resources.
            $matches = array();
            preg_match_all('/\[\[resource::.*?\]\]/s', $item['value'], $matches);

            // Get the type of resource for each match.
            $types = array();
            foreach ($matches[0] as $match) {
              // Strip brackets
              $match = str_replace("[[", "", $match);
              $match = str_replace("]]", "", $match);

              // Split up the bigger piecew.
              $options = explode('::', $match);
              $parameters = array();

              // Loop through all the tag/value sets.
              foreach ($options as $index => $option) {
                // Make sure we are not on the first one.
                if ($index > 0) {
                  // Find the key value pairs.
                  $option_value = explode(':', $option);

                  $key = array_shift($option_value);
                  $value = implode(':', $option_value);
                  $parameters = array_merge($parameters, array($key => $value));
                }
              }
              $types[] = $parameters['type'];
            }
          }
        }
      }
    }
  }

  if (!empty($types)) {
    // Build our metatag element and add it to the header.
    $element = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'gsb:resources',
        'content' => implode('|', $types),
      ),
    );
    drupal_add_html_head($element, 'gsb_resources');
  }

  // add the gsb:node metatag - which contains the nid
  $element = array(
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'gsb:node',
      'content' => $build['#node']->nid,
    ),
  );
  drupal_add_html_head($element, 'gsb_node');

}

function gsb_feature_google_tag_manager_token_info() {
  $info['tokens']['node']['gtm-centers-research-programs'] = array(
    'name' => t('Centers Research Programs'),
    'description' => t('Centers Research Programs'),
  );
  $info['tokens']['node']['gtm-author-name'] = array(
    'name' => t('Author Name'),
    'description' => t('Author Name'),
  );
  $info['tokens']['node']['gtm-circle-topics'] = array(
    'name' => t('Circle Topics'),
    'description' => t('Circle Topics'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function gsb_feature_google_tag_manager_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    $language = $node->language;
    foreach ($tokens as $name => $original) {
      if (stristr($name, 'gtm-author-name')) {
        $parameters = explode(':', $name);
        $name = array_shift($parameters);
        $output = array();
        foreach($node->field_authors[$language] as $author) {
          $ewrap_author = entity_metadata_wrapper('field_collection_item', $author['value']);
          $fac_or_other = $ewrap_author->field_person_fac_or_other->value();
          $faculty_ref = $ewrap_author->field_person_fac_single_ref->value();
          $full_name = '';
          if ($fac_or_other == "UseEntityReference") {
            $full_name = $faculty_ref->title;
          }
          else {
            $first_name = $ewrap_author->field_first_name->value();
            $last_name = $ewrap_author->field_last_name->value();
            $full_name = $first_name . ' ' . $last_name;
          }
          $output[] = empty($output) ? $full_name : '|' . $full_name;
        }
        $replacements[$original] = implode('', $output);
      }
      if (stristr($name, 'gtm-circle-topics')) {
        $parameters = explode(':', $name);
        $name = array_shift($parameters);
        $output = array();
        foreach($node->field_circle_topics[$language] as $topic) {
          $term = taxonomy_term_load($topic['tid']);
          $output[] = empty($output) ? $term->name : '|' . $term->name;
        }
        $replacements[$original] = implode('', $output);
      }
      if (stristr($name, 'gtm-centers-research-programs')) {
        $ewrap_node = entity_metadata_wrapper('node', $node->nid);
        $centers = $ewrap_node->field_centers_research_programs->value();
        $output = array();
        foreach($centers as $center) {
          $output[] = empty($output) ? $center->name : '|' . $center->name;
        }
        $replacements[$original] = implode('', $output);
      }
    }
  }
  return $replacements;
}